// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// HCSR04 //
// ------ //

#define HCSR04_wrap_target 0
#define HCSR04_wrap 18

static const uint16_t HCSR04_program_instructions[] = {
		//     .wrap_target
		0xe001, //  0: set    pins, 1
		0xe033, //  1: set    x, 19
		0xa0c1, //  2: mov    isr, x
		0x4066, //  3: in     null, 6
		0xa026, //  4: mov    x, isr
		0x0045, //  5: jmp    x--, 5
		0xe000, //  6: set    pins, 0
		0x20a0, //  7: wait   1 pin, 0
		0xa02b, //  8: mov    x, !null
		0x004b, //  9: jmp    x--, 11
		0x000c, // 10: jmp    12
		0x00c9, // 11: jmp    pin, 9
		0xa0c9, // 12: mov    isr, !x
		0x8000, // 13: push   noblock
		0xe03c, // 14: set    x, 28
		0xa0c1, // 15: mov    isr, x
		0x4072, // 16: in     null, 18
		0xa026, // 17: mov    x, isr
		0x0052, // 18: jmp    x--, 18
		//     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program HCSR04_program = {
		.instructions = HCSR04_program_instructions,
		.length = 19,
		.origin = -1,
};

static inline pio_sm_config HCSR04_program_get_default_config(uint offset) {
	pio_sm_config c = pio_get_default_sm_config();
	sm_config_set_wrap(&c, offset + HCSR04_wrap_target, offset + HCSR04_wrap);
	return c;
}
#endif
